name: WireGuard Test All Servers

on:
  workflow_dispatch:
  schedule:
    - cron: '*/30 * * * *' # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

jobs:
  fetch-servers:
    runs-on: ubuntu-latest
    env:
      SERVERS_URL: "http://45.77.30.118:8080/servers"
      MASTER_XOR_SECRET: "oftai-ofgaize"
    outputs:
      server_ids: ${{ steps.fetch.outputs.server_ids }}
    steps:
      - name: Install deps
        run: |
          sudo apt update
          sudo apt install -y curl python3

      - name: Fetch server list & decode
        id: fetch
        run: |
          python3 <<'PY'
          import os, sys, time, base64, hmac, hashlib, json, urllib.request

          URL = os.getenv("SERVERS_URL")
          MASTER = os.getenv("MASTER_XOR_SECRET")
          TIMEOUT = 10
          RETRIES = 3

          def derive_key(m, n): return hmac.new(m, n, hashlib.sha256).digest()
          def xor_cycle(data,k): return bytes([b ^ k[i%len(k)] for i,b in enumerate(data)])

          last_err = None
          for i in range(RETRIES):
              try:
                  req = urllib.request.Request(URL)
                  with urllib.request.urlopen(req, timeout=TIMEOUT) as r:
                      headers = dict(r.getheaders())
                      body = r.read()
                  break
              except Exception as e:
                  last_err = e
                  time.sleep(2)
          else:
              print(f"::error ::Servers API not reachable: {last_err}")
              sys.exit(1)

          xenc = headers.get("X-Encrypted") or headers.get("x-encrypted")
          nonce = headers.get("X-Nonce") or headers.get("x-nonce")
          if xenc=="1" and nonce:
              if not MASTER:
                  print("::error ::MASTER_XOR_SECRET missing")
                  sys.exit(1)
              body = xor_cycle(base64.b64decode(body),
                               hmac.new(MASTER.encode(), base64.b64decode(nonce), hashlib.sha256).digest())

          txt = body.decode("utf-8", errors="ignore")
          try:
              data = json.loads(txt)
          except Exception:
              print("::error ::Servers API returned non-JSON")
              print(txt[:500]); sys.exit(1)

          if not isinstance(data, list):
              print("::error ::Servers API JSON is not list")
              sys.exit(1)

          ids = [srv.get("serverId") for srv in data if srv.get("serverId")]
          if not ids:
              print("::error ::No serverId found in response")
              sys.exit(1)

          print(f"::notice ::Found {len(ids)} servers: {', '.join(ids)}")
          # üëâ –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–¥–∞—Ç—å output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as gh:
              import json as js
              gh.write(f"server_ids={js.dumps(ids)}\n")
          PY

  test:
    needs: fetch-servers
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        server_id: ${{ fromJson(needs.fetch-servers.outputs.server_ids) }}
    env:
      API_TIMEOUT: "10"
      API_RETRIES: "3"
      MASTER_XOR_SECRET: "oftai-ofgaize"
    steps:
      - name: Install deps
        run: |
          sudo apt update
          sudo apt install -y wireguard curl python3

      - name: üåê IP before VPN
        run: |
          echo "::group::IP before VPN"
          curl -s https://ipinfo.io/ip || echo "‚ùå"
          echo ; curl -s https://ifconfig.me || echo "‚ùå"
          echo ; curl -s https://api.myip.com || echo "‚ùå"
          echo "::endgroup::"

      - name: üîë Fetch & build config for ${{ matrix.server_id }}
        run: |
          python3 <<'PY'
          import os, sys, time, base64, hmac, hashlib, json, re, urllib.request

          sid = "${{ matrix.server_id }}"
          API_URL = f"http://45.77.30.118:8080/get-config?server_id={sid}&is_grand=true"
          TIMEOUT = int(os.getenv("API_TIMEOUT","10"))
          RETRIES = int(os.getenv("API_RETRIES","3"))
          MASTER = os.getenv("MASTER_XOR_SECRET","")

          def derive_key(m,n): return hmac.new(m,n,hashlib.sha256).digest()
          def xor_cycle(data,k): return bytes([b ^ k[i%len(k)] for i,b in enumerate(data)])

          last_err=None
          for _ in range(RETRIES):
              try:
                  req=urllib.request.Request(API_URL)
                  with urllib.request.urlopen(req,timeout=TIMEOUT) as r:
                      headers=dict(r.getheaders())
                      body=r.read()
                  break
              except Exception as e:
                  last_err=e
                  time.sleep(2)
          else:
              print("::error ::API unreachable:",last_err)
              sys.exit(1)

          xenc=headers.get("X-Encrypted") or headers.get("x-encrypted")
          nonce=headers.get("X-Nonce") or headers.get("x-nonce")
          if xenc=="1" and nonce:
              if not MASTER:
                  print("::error ::MASTER_XOR_SECRET empty")
                  sys.exit(1)
              body=xor_cycle(base64.b64decode(body),
                             hmac.new(MASTER.encode(),base64.b64decode(nonce),hashlib.sha256).digest())

          text=body.decode("utf-8","ignore")
          wg=None
          if "[Interface]" in text:
              wg=text
          else:
              try:
                  j=json.loads(text)
                  if all(k in j for k in ["private_key","address","server_ip","server_port","server_public_key"]):
                      wg="\n".join([
                          "[Interface]",
                          f"PrivateKey = {j['private_key']}",
                          f"Address = {j['address']}",
                          "DNS = 1.1.1.1",
                          "",
                          "[Peer]",
                          f"PublicKey = {j['server_public_key']}",
                          "AllowedIPs = 0.0.0.0/0, ::/0",
                          f"Endpoint = {j['server_ip']}:{j['server_port']}",
                          "PersistentKeepalive = 25"
                      ])
              except: pass

          if not wg:
              print("::error ::no wg_conf for",sid)
              sys.exit(1)

          with open("wg0.conf","w") as f: f.write(wg)
          print("::notice ::wg0.conf for",sid,"written")
          PY

      - name: Install wg0.conf
        run: |
          sudo mkdir -p /etc/wireguard
          sudo mv wg0.conf /etc/wireguard/wg0.conf
          sudo chmod 600 /etc/wireguard/wg0.conf

      - name: üîå Connect VPN
        run: |
          sudo wg-quick up wg0
          sudo wg show

      - name: üåç IP via VPN
        run: |
          echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf
          sleep 3
          echo "::group::IP via VPN"
          curl -s https://ipinfo.io/ip || echo "‚ùå"
          echo ; curl -s https://ifconfig.me || echo "‚ùå"
          echo ; curl -s https://api.myip.com || echo "‚ùå"
          echo "::endgroup::"

      - name: ‚úÖ Ping via VPN
        run: ping -c 4 1.1.1.1 || echo "‚ùå Ping failed"

      - name: üì¥ Disconnect
        if: always()
        run: sudo wg-quick down wg0